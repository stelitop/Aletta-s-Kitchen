@using Aletta_s_Kitchen.GameRelated
@using Aletta_s_Kitchen.GameRelated.IngredientRelated
<div class="card ingredient-card @(onDeck ? "paper" : "") @(Glowing() ? "glowing" : "")" style="width: 15rem;">
  <div class="card-body d-flex flex-column">
    <h5 class="card-title">@ingredient.name</h5>
    <h6 class="card-subtitle mb-2 text-muted">
        <span class="badge badge-pill badge-info">
            @($"{ingredient.points}p")
        </span>
        @GetTribeString()
    </h6>
    <p class="card-text">@ingredient.GetDescriptionText(game, GetGameLocation())</p>
    @if (onClick != null) {
        <button class="btn btn-primary pick-button mt-auto" @onclick="@InvokeOnClick">Pick</button>
    } else if (onDeck) {
        <button class="btn btn-secondary pick-button mt-auto" disabled>On Deck</button>
    }
    
  </div>
</div>

@code
{
    [Parameter]
    public Ingredient ingredient { get; set; }

    [Parameter]
    public Action onClick { get; set;}

    [Parameter]
    public bool onDeck { get; set; }

    [Parameter]
    public Game game { get; set; }

    [Parameter]
    public int index { get; set; }

    [Parameter]
    public bool inKitchen { get; set; }

    public static Dictionary<Tribe, string> tribeToEmoji { get; } = new Dictionary<Tribe, string>{
            { Tribe.NoTribe, ""},
            { Tribe.Beast, "ü¶Å"},
            { Tribe.Demon, "üëø"},
            { Tribe.Dragon, "üêâ"},
            { Tribe.Elemental, "üå™Ô∏è"},
            { Tribe.Fruit, "üçé"},
            { Tribe.Murloc, "üêü"},
            { Tribe.Vegetable, "ü•ï"},
    };

    public string GetTribeString() {
        string ret = "";
        if (ingredient.tribe != Tribe.NoTribe) ret += $"{tribeToEmoji[ingredient.tribe]} {ingredient.tribe}";
        return ret;
    }

    private void InvokeOnClick() {
        onClick?.Invoke();
    }

    GameLocation GetGameLocation() {
        if (inKitchen && !onDeck) return GameLocation.Kitchen;
        if (onDeck) return GameLocation.NextIngredient;
        return GameLocation.Hand; 
    }

    private bool Glowing() {
        if (inKitchen && !onDeck) {
            if (ingredient.glowLocation == GameLocation.Kitchen || ingredient.glowLocation == GameLocation.Any) {
                if (ingredient.GlowCondition(game, index)) {
                    return true;
                }
            }
        } else if (onDeck) {
            if (ingredient.glowLocation == GameLocation.NextIngredient || ingredient.glowLocation == GameLocation.Any) {
                try {
                    if (ingredient.GlowCondition(game, -1)) {
                        return true;
                    }
                } catch (Exception) {
                    return false;
                }
            }
        } else {
            if (ingredient.glowLocation == GameLocation.Hand || ingredient.glowLocation == GameLocation.Any) {
                if (ingredient.GlowCondition(game, index)) {
                    return true;
                }
            }
        }
        return false;
    }
}